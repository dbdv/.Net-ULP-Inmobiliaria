@using Microsoft.AspNetCore.Antiforgery
@model List<Property>
@inject IAntiforgery antiforgery
@{
    ViewData["Title"] = "Propiedades";
    var owners = @Html.Raw(Json.Serialize(ViewBag.owners));
    var renters = @Html.Raw(Json.Serialize(ViewBag.renters));
    var token = antiforgery.GetAndStoreTokens(Context).RequestToken;
}
<script
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCE_uqihM0y5egCZl5QlkZNFqLd1_YPQIg&callback=initMaps&v=weekly"
      defer
></script>

@* <script
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCE_uqihM0y5egCZl5QlkZNFqLd1_YPQIg&callback=initDetilsMap&v=weekly"
      defer
></script> *@

<section class="section">
    <ul class="renters-list list">
        <li class="renter-list-header list-header">
            <div class="list-colum">
                <span id="n-intern-header" class="n-intern-column">N° interno</span>
                <span class="prop-list-field">Uso</span>
                <span class="prop-list-field">Dueño</span>
                <span class="prop-list-field">Contacto</span>
                <span class="prop-list-field address-field">Dirección</span>
            </div>
            <div class="action-buttons list-actions-column">
                <button onclick="createForm()" class="new-btn create-btn">
                    <img class="btn-img" src="~/images/new_prop.png" alt="agregar propietario">
                    nuevo
                </button>
            </div>
        </li>
        @{
            foreach (var property in Model)
            {
                <li class="renter-row list-row">
                    <div class="list-colum">
                        <span class="n-intern-column">#@property.Id</span>
                        <span class="prop-list-field">@property.Purpose?.Description</span>
                        <span class="prop-list-field">@property.Owner?.ToString()</span>
                        <span class="prop-list-field">@property.Owner.getContactInfo()</span>
                        <span class="prop-list-field address-field">@property.Address</span>
                    </div>
                    <div class="action-buttons list-actions-column">
                        <button class="button list-action-button details-bg" onclick="showPropertyDetail('@property.Id')">
                            <span class="tooltip hidden">Ver detalles</span>
                            <img class="btn-img" src="~/images/details.png" alt="">
                        </button>
                        <button class="button list-action-button edit-bg" onclick="updateForm('@property.Id')">
                            <span class="tooltip hidden">Editar</span>
                            <img class="btn-img" src="~/images/edit.png" alt="">
                        </button>
                        <button class="button list-action-button danger-bg" onclick="confirmDelete('@property.Id')">
                            <span class="tooltip hidden">Eliminar</span>
                            <img class="btn-img" src="~/images/delete.png" alt="">
                        </button>
                    </div>
                </li>
            }
        }
    </ul>
</section>

<section class="actions-section actions-section-hide section">
    <form onsubmit="handleSubmit(event)" onclick="handleGeneralFormClicks(event)" class="form hidden">
        <h2 class="form-title">title</h2>
        <div class="form-row">
            <label class="form-label" for="">@Html.DisplayNameFor(Props=>Props[0].Type_id)<sup>*</sup></label>
            <select class="form-input form-input-select" name="type_id" id="type_id" onchange="handleChange(event)">
                <option value="null">Selecciona</option>
                @foreach(var prop_type in ((List<PropType>)ViewBag.types)){
                    <option value=@prop_type.Id>@prop_type.Label</option>
                }
            </select>
            <span class="input-error">Campo obligatorio</span>
        </div>
        <div class="form-row">
            <label class="form-label" for="">@Html.DisplayNameFor(Props=>Props[0].Purpose_id)<sup>*</sup></label>
            <select class="form-input form-input-select" name="purpose_id" id="purpose_id" onchange="handleChange(event)">
                <option value="null">Selecciona</option>
                @foreach(var purpose in ((List<Purpose>)ViewBag.purposes)){
                    <option value=@purpose.Id>@purpose.Description</option>
                }
            </select>
            <span class="input-error">Campo obligatorio</span>
        </div> 
        <div class="form-row">
            <label class="form-label" for="">@Html.DisplayNameFor(Props=>Props[0].Rooms)<sup>*</sup></label>
            <input onchange="handleChange(event)" onclick="addErrorWatcher(event)" onfocus="addErrorWatcher(event)" onfocusout="checkInputs()" id="rooms-input" name="rooms" class="form-input" type="number" min="1" required>
            <span class="input-error">Mínimo 1, sólo números</span>
        </div>
        <div class="form-row">
            <label class="form-label" for="">@Html.DisplayNameFor(Props=>Props[0].Price)<sup>*</sup></label>
            <input onchange="handleChange(event)" onclick="addErrorWatcher(event)" onfocus="addErrorWatcher(event)" onfocusout="checkInputs()" id="price-input" name="price" class="form-input" type="number" min="1" required>
            <span class="input-error">No es un valor válido</span>
        </div>
        <div class="form-row">
            <label class="form-label" for="">@Html.DisplayNameFor(Props=>Props[0].Address)<sup>*</sup></label>
            <input onchange="handleChange(event)" onclick="addErrorWatcher(event)" onfocus="addErrorWatcher(event)" onfocusout="checkInputs()" id="address-input" name="address" class="form-input" type="text" required>
            <span class="input-error">Campo obligatorio</span>
        </div>
        <div class="form-row">
            <label class="form-label" for="">@Html.DisplayNameFor(Props=>Props[0].Owner_id)<sup>*</sup></label>
            <div class="options-div">
                <input onkeyup="handleSuggestions(event)"  onclick="addErrorWatcher(event)" onfocus="addErrorWatcher(event)" onfocusout="checkInputs()" id="owner-input" name="owner" class="form-input suggestions" type="text" required>
                <span class="input-error">Campo obligatorio</span>
                <div class="options-modal hidden"></div>
            </div>
        </div>
        <div id="map"></div>
        <div class="form-buttons">
            <button class="confirm-btn disabled-btn" id="send-button" disabled></button>
            <button class="cancel-btn" onclick="cancelAction()">Cancelar</button>
        </div>
    </form>


    <form onsubmit="handleSubmit(event)" onclick="handleGeneralFormClicks(event)" class="form-detail form-detail-props hidden">
        <h2 class="form-title form-title-props">Detalles de propiedad</h2>
        <div class="form-row">
            <label class="form-label" for="">@Html.DisplayNameFor(Props=>Props[0].Type_id)</label>
            <select disabled class="form-input form-input-select" name="type_id" id="type_id-detail">
                @foreach(var prop_type in ((List<PropType>)ViewBag.types)){
                    <option value=@prop_type.Id>@prop_type.Label</option>
                }
            </select>
        </div>
        <div class="form-row">
            <label class="form-label" for="">@Html.DisplayNameFor(Props=>Props[0].Purpose_id)</label>
            <select disabled class="form-input form-input-select" name="purpose_id" id="purpose_id-detail">
                @foreach(var purpose in ((List<Purpose>)ViewBag.purposes)){
                    <option value=@purpose.Id>@purpose.Description</option>
                }
            </select>
        </div> 
        <div class="form-row">
            <label class="form-label" for="">@Html.DisplayNameFor(Props=>Props[0].Rooms)</label>
            <input disabled id="rooms-field-detail" name="rooms" class="form-input" type="number" min="1" required>
        </div>
        <div class="form-row">
            <label class="form-label" for="">@Html.DisplayNameFor(Props=>Props[0].Price)</label>
            <input disabled id="price-field-detail" name="price" class="form-input" type="text" min="1" required>
        </div>
        <div class="form-row">
            <label class="form-label" for="">@Html.DisplayNameFor(Props=>Props[0].Address)</label>
            <input disabled id="address-field-detail" name="address" class="form-input" type="text" required>
        </div>
        <div class="form-row">
            <label class="form-label" for="">@Html.DisplayNameFor(Props=>Props[0].Owner_id)</label>
            <div class="options-div">
                <input disabled id="owner-field-detail" name="owner" class="form-input suggestions" type="text" required>
            </div>
        </div>
        <div id="details-map"></div>
        <div class="details-form-actions">
            <h2 class="new-contract-title hidden">Nuevo contrato</h2>
            <button class="show-create-contract-btn" id="show-create-contract-button" onclick="newContractForm()">Nuevo contrato</button>
        </div>
        <div class="create-contract hidden">
            <div class="form-row">
                <label class="form-label">Inquilino</label>
                <div class="renters-options-div">
                    <input onkeyup="handleRentersSuggestions(event)"  onclick="addErrorWatcher(event)" onfocus="addErrorWatcher(event)" onfocusout="checkInputs()" id="renter-input" name="renter" class="form-input suggestions" type="text" required>
                    <span class="input-error">Campo obligatorio</span>
                    <div class="renters-options-modal hidden"></div>
                </div>
            </div>
            <div class="form-row">
                <label class="form-label">Desde</label>
                <div class="renters-options-div">
                    <input onkeyup="handleRentersSuggestions(event)" onchange="handleContractChange(event)"  onclick="addErrorWatcher(event)" onfocus="addErrorWatcher(event)" onfocusout="checkInputs()" id="from-input" name="from" class="form-input suggestions" type="date" required>
                    <span class="input-error">Campo obligatorio</span>
                </div>
            </div>
            <div class="form-row">
                <label class="form-label">Hasta</label>
                <div class="renters-options-div">
                    <input onkeyup="handleRentersSuggestions(event)" onchange="handleContractChange(event)" onclick="addErrorWatcher(event)" onfocus="addErrorWatcher(event)" onfocusout="checkInputs()" id="until-input" name="until" class="form-input suggestions" type="date" required>
                    <span class="input-error">Campo obligatorio</span>
                </div>
            </div>
            <div class="form-row">
                <label class="form-label">Valor mensual</label>
                <div class="renters-options-div">
                    <input onkeyup="handleRentersSuggestions(event)"  onclick="addErrorWatcher(event)" onfocus="addErrorWatcher(event)" onfocusout="checkInputs()" id="fee-input" name="fee" class="form-input suggestions" type="number" required>
                    <span class="input-error">Campo obligatorio</span>
                </div>
            </div>
            <div class="details-form-actions">
                <button class="create-contract-btn" id="create-contract-button">Guardar</button>
                <button class="cancel-contract-btn" id="cancel-contract-button" onclick="cancelNewContract()">Cancelar</button>
            </div>
        </div>
    </form>
    
    <div class="confirm-delete confirm-dialog hidden">
        <span>Está seguro que desea eliminar?</span>
        <div class="buttons">
            <button class="delete-btn">Eliminar</button>
            <button class="cancel-btn" onclick="cancelAction()">Cancelar</button>
        </div>
    </div>

    <div class="spinner"></div>

    <div class="toast error-toast hidden">
        <span class="toast-title error-type"></span>
        <span class="toast-info error-msg"></span>
    </div>
    
</section>

<script>

    document.body.addEventListener('keydown', (e)=>{
        if(e.key === "Escape") {
            hideActions();
        }
    });

    @* const base_url = "https://localhost:7164/Property/"; *@

    let last_action;
    let delete_id = null;

    const defaultLatLng = { lat: -33.299881, lng:  -66.334728 };

    const default_body = {
        owner_id: null,
        purpose_id: null,
        type_id: null,
        rooms: null,
        price: null,
        address: null,
        latitude: defaultLatLng.lat,
        longitude: defaultLatLng.lng,
    };
    
    const default_contract_body = {
        from: null,
        until: null,
        renter_id: null,
        property_id: null,
        fee: null,
    };

    let body_data = default_body;
    let contract_body_data = default_contract_body;

    const markers = [];

    function removeMarkers(){
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(null);
        }
    }

    function setMarkerDefault(){
        const marker = new google.maps.Marker({
            position: defaultLatLng,
            map,
            draggable: true,
            title: "Selecciona la ubicación!",
        });

        markers.push(marker);

        map.addListener('click', (e)=>{
            map.panTo(e.latLng);
            marker.setPosition(e.latLng);
            body_data.latitude = e.latLng.lat();
            body_data.longitude = e.latLng.lng();
            @* console.log(body_data); *@
        })


        marker.addListener('click', (e)=>{
            map.setZoom(16);
            map.setCenter(marker.getPosition());
        })
    }
    

    function handleSubmit(e){
        e.preventDefault();
    }

    let map;
    let detailsMap;

    function initMap() {
        map = new google.maps.Map(document.getElementById("map"), {
            center: defaultLatLng,
            zoom: 12,
        });
        const marker = new google.maps.Marker({
            position: defaultLatLng,
            map,
            draggable: true,
            title: "Selecciona la ubicación!",
        });

        markers.push(marker);

        map.addListener('click', (e)=>{
            map.panTo(e.latLng);
            marker.setPosition(e.latLng);
            body_data.latitude = e.latLng.lat();
            body_data.longitude = e.latLng.lng();
            @* console.log(body_data); *@
        })


        marker.addListener('click', (e)=>{
            map.setZoom(16);
            map.setCenter(marker.getPosition());
        })
    }
    
    function initDetilsMap() {
        detailsMap = new google.maps.Map(document.getElementById("details-map"), {
            center: defaultLatLng,
            zoom: 16,
        });
    }

    function initMaps(){
        initMap();
        initDetilsMap();
    }

    window.initMaps = initMaps;

    function handleChange(event){
        const key = event.target.name;
        if(event.target.name == 'type_id' || event.target.name == 'purpose_id'){
            const val = parseInt(event.target.value.trim());
            body_data[key] =  !isNaN(val) ? val : null;
            if(!body_data[key]){
                event.target.classList.add('invalid');
            }else{
                event.target.classList.remove('invalid');
            }
        }else{
            body_data[key] = event.target.value.trim();
        }
        checkInputs();
    }
    
    function handleContractChange(event){
        const key = event.target.name;
        
            console.log("ACA ",event.target.value);
            if(key == 'from'){
                setFrom(event.target.value);
            }else{
                contract_body_data[key] = event.target.value.trim();
            }
        console.log(contract_body_data)
        checkInputs();
    }

    function checkInputs(){
        if( body_data.address?.length > 5 
            && body_data.owner_id > 0
            && body_data.purpose_id > 0
            && body_data.type_id > 0
            && body_data.rooms > 0
            && body_data.price > 0
        ){
            document.querySelector("#send-button").removeAttribute("disabled"); 
            document.querySelector("#send-button").classList.remove("disabled-btn");
        }else{
            document.querySelector("#send-button").setAttribute("disabled", "");
            document.querySelector("#send-button").classList.add("disabled-btn");
        }
    }
    
    function checkContractInputs(){
        if( contract_body_data.fee > 0 
            && contract_body_data.from != null
            && contract_body_data.until != null
            && contract_body_data.property_id > 0
            && contract_body_data.renter_id > 0
        ){
            document.querySelector("#send-button").removeAttribute("disabled"); 
            document.querySelector("#send-button").classList.remove("disabled-btn");
        }else{
            document.querySelector("#send-button").setAttribute("disabled", "");
            document.querySelector("#send-button").classList.add("disabled-btn");
        }
    }

    function clearForm(){
        document.querySelector("#owner-input").value='';
        document.querySelector("#address-input").value='';
        document.querySelector("#price-input").value='';
        document.querySelector("#rooms-input").value='';
        document.querySelector('#type_id').value=null;
        document.querySelector('#purpose_id').value=null;
        document.querySelector(".error-toast").classList.add("hidden");
        body_data = default_body;
        document.querySelector("#send-button").removeEventListener("click",()=>{sendCreateReq()});
    }
    
    function showActions(){
        document.querySelector(".actions-section").classList.remove("actions-section-hide")
    }
    
    function hideActions(){
        document.querySelector(".actions-section").classList.add("actions-section-hide")
        document.querySelector(".form").classList.add("hidden");
        document.querySelector(".form-detail").classList.add("hidden");
        document.querySelector(".confirm-delete").classList.add("hidden");
        document.querySelector(".spinner").classList.remove("hidden");
        document.querySelector(".error-toast").classList.add("hidden");
        delete_id = null;
    }

    function cancelAction(){
        document.querySelector(".actions-section").classList.add("actions-section-hide")
        document.querySelector(".form").classList.add("hidden");
        document.querySelector(".confirm-delete").classList.add("hidden");
        document.querySelector(".spinner").classList.remove("hidden");
        clearForm();
        removeErrorWatcher();
        delete_id = null;
    }

    function confirmDelete(id){
        document.querySelector(".spinner").classList.add("hidden");
        document.querySelector(".confirm-delete").classList.remove("hidden");
        document.querySelector(".delete-btn").addEventListener("click", ()=>{deleteRenter(id)})
        showActions();
    }

    function deleteProperty(id){
        document.querySelector(".confirm-delete").classList.add("hidden");
        document.querySelector(".spinner").classList.remove("hidden");
        
        if(id !== null){
            fetch(`${base_url}Property/${id}`, {
                method: "DELETE",
                headers:{
                    "Content-Type": "application/json",
                    "RequestVerificationToken": "@token"
                },
            }).then(res=>{
                if(res.status != 200)
                    showError("Error", "No se pudo eliminar el inmueble, intenta nuevamente.");
                if(res.redirected)
                    window.location.href =res.url;
                
            }).catch(e=>{
                console.error(e);
            })
        }
    }
    
    function createForm(){
        showActions();
        if(last_action == 'update') clearForm();
        last_action = 'create';
        document.querySelector(".form-title").innerHTML = "Nueva propiedad";
        document.querySelector("#send-button").innerHTML = "Agregar";
        document.querySelector("#send-button").addEventListener("click", ()=>{sendCreateReq()});
        document.querySelector(".spinner").classList.add("hidden");
        document.querySelector(".form").classList.remove("hidden");
    }
    
    function updateForm(prop_id){
        
        last_action = 'update';
        showActions();

        fetch(`${base_url}Property/${parseInt(prop_id)}`, {
            headers:{
                "RequestVerificationToken": "@token"
            }
        }).then(res=>res.json()).then(data=>{
            setCurrentPropertyData(data)
            document.querySelector(".spinner").classList.add("hidden");
            document.querySelector(".form").classList.remove("hidden");
        }).catch(e=>{
            console.error(e);
        })
        document.querySelector(".form-title").innerHTML = "Actualizar datos de propiedad";
        document.querySelector("#send-button").innerHTML = "Actualizar";
    }

    function setCurrentPropertyData(property){
        body_data = {...property};
        const owner = (@owners).find(item=>item.id == body_data.owner_id);
        document.querySelector("#owner-input").value= owner.first_name + " " + owner.last_name + " " + owner.dni; 
        document.querySelector("#address-input").value=body_data.address;
        document.querySelector("#price-input").value=parseInt(body_data.price);
        document.querySelector("#rooms-input").value=body_data.rooms;
        document.querySelector("#purpose_id").value=body_data.purpose_id;
        document.querySelector("#type_id").value=body_data.type_id;
        removeMarkers();
        if(property.latitude && property.longitude){
            const center = {lat: property.latitude, lng: property.longitude};
            const marker = new google.maps.Marker({
                position: center,
                map,
                draggable: true,
                title: "Selecciona la ubicación!",
            });
            markers.push(marker);
            marker.setMap(map);
        }else{
            setMarkerDefault();
        }
        document.querySelector("#send-button").addEventListener("click", ()=>{sendUpdateReq(property.id)});
    }
    function displayPropertyInfo(property){
        document.querySelector("#type_id-detail").value=property.type_id;
        document.querySelector("#purpose_id-detail").value=property.purpose_id;
        document.querySelector("#rooms-field-detail").value=property.rooms;
        document.querySelector("#price-field-detail").value="$" + property.price;
        document.querySelector("#address-field-detail").value=property.address;
        document.querySelector("#owner-field-detail").value= property.owner.first_name + " " + property.owner.last_name + " " + property.owner.dni;
        if(property.latitude && property.longitude){
            const center = {lat: property.latitude, lng: property.longitude};
            setDeailsMapCoor(center);
        }else{
            hideDetailsMap()
        }
    }

    function setDeailsMapCoor(center){
        detailsMap.setCenter(center);
        const marker = new google.maps.Marker({
            position: center,
            detailsMap,
            draggable: false,
        });
        markers.push(marker);
        marker.setMap(detailsMap);
        document.getElementById("details-map").classList.remove("hidden");
    }

    function hideDetailsMap() {
        document.getElementById("details-map").classList.add("hidden");
    }
    
    function showPropertyDetail(id){
        
        showActions();

        fetch(`${base_url}Property/${parseInt(id)}`, {
            headers:{
                "RequestVerificationToken": "@token"
            }
        }).then(res=>res.json()).then(data=>{
            if(!data)
                return showError("Error", "No se pudo acceder a los datos de la propiedad, intenta nuevamente.", ()=>{
                    hideActions();
                });
            displayPropertyInfo(data);
            document.querySelector(".spinner").classList.add("hidden");
            document.querySelector(".form-detail").classList.remove("hidden");
        }).catch(e=>{
            console.error(e);
        })
    }
    function sendCreateReq(){

        if(
            body_data.address?.length < 5 
            && body_data.owner_id < 0
            && body_data.purpose_id < 0
            && body_data.type_id < 0
            && body_data.rooms < 0
            && body_data.price < 0
        )
            return showError('Datos inválidos', 'No completó correctamente alguno de los datos.');

        document.querySelector(".form").classList.add("hidden");
        document.querySelector(".spinner").classList.remove("hidden");

        fetch(`${base_url}Property`, {
                method: "POST",
                headers:{
                    "Content-Type": "application/json",
                    "RequestVerificationToken": "@token"
                },
                body: JSON.stringify(body_data),
            }).then(res=>{
                if(res.status != 200)
                    showError("Error", "No se pudo agregar la propiedad, intenta nuevamente.", ()=>{
                        document.querySelector(".form").classList.remove("hidden");
                    });
                if(res.redirected)
                    window.location.href =res.url;
                
            }).catch(e=>{
                console.error(e);
        })
    }
    
    function sendUpdateReq(){

        document.querySelector(".form").classList.add("hidden");
        document.querySelector(".spinner").classList.remove("hidden");

        fetch(`${base_url}Property/update`, {
                method: "PUT",
                headers:{
                    "Content-Type": "application/json",
                    "RequestVerificationToken": "@token"
                },
                body: JSON.stringify(body_data),
            }).then(res=>{
                if(res.status != 200)
                    showError("Error", "No se pudo crear el inquilino, intenta nuevamente.", ()=>{
                        document.querySelector(".form").classList.remove("hidden");
                    });
                if(res.redirected)
                    window.location.href =res.url;
                
            }).catch(e=>{
                console.error(e);
        })
    }

    function addErrorWatcher(event){
        event.target.classList.add("error-watcher");
    }
    
    function removeErrorWatcher(){
        document.querySelectorAll(".error-watcher").forEach(input=>{
            input.classList.remove("error-watcher");
        })
    }
    
    function removeDeleteListener(){
        document.querySelector(".delete-btn").removeEventListener("click", deleteProperty)
    }
    
    function showError(type, msg, effect = null){
        document.querySelector(".spinner").classList.add("hidden");
        document.querySelector(".error-toast").classList.remove("hidden");
        document.querySelector(".error-type").innerHTML = type;
        document.querySelector(".error-msg").innerHTML = msg;
        setTimeout(()=>{
            closeToast(effect);
        }, 3.5 * 1000)
    }

    function closeToast(effect = null){
        document.querySelector(".error-toast").classList.add("hidden");
        document.querySelector(".error-type").innerHTML = '';
        document.querySelector(".error-msg").innerHTML = '';
        if(effect) effect();
    }

    function handleSuggestions(e){
        const keyword = document.querySelector("#owner-input").value;
        const options_div = document.querySelector(".options-modal");
        options_div.innerHTML = '';
        body_data.owner_id = null;
        if(keyword.trim().length > 2){
            const matches = (@owners).filter(item=>{
                return (item.first_name+" "+item.last_name + " " + item.dni).toLowerCase().includes(keyword.toLowerCase())
            })

            matches.forEach(match=>{
                options_div.classList.remove("hidden")
                const span = document.createElement('span');
                span.id = match.id;
                span.classList.add("option-span");
                span.innerText = match.first_name + " " + match.last_name + " " + match.dni;
                span.addEventListener('click', ()=>{
                    body_data.owner_id = match.id;
                    document.querySelector("#owner-input").value = match.first_name + " " + match.last_name + " " + match.dni;
                    document.querySelector("#owner-input").setAttribute('isvalid', true);
                    options_div.classList.add("hidden")
                    document.querySelector("#owner-input").classList.remove('invalid');
                    checkInputs();
                })
                options_div.appendChild(span);
            })
        }else{
            options_div.classList.add("hidden")
        }
        if(!body_data.owner_id)
            document.querySelector("#owner-input").classList.add('invalid');
        checkInputs();
    }
    
    function handleRentersSuggestions(e){
        const keyword = document.querySelector("#renter-input").value;
        const options_div = document.querySelector(".renters-options-modal");
        options_div.innerHTML = '';
        contract_body_data.renter_id = null;
        if(keyword.trim().length > 2){
            const matches = (@renters).filter(item=>{
                return (item.first_name+" "+item.last_name + " " + item.dni).toLowerCase().includes(keyword.toLowerCase())
            })

            matches.forEach(match=>{
                options_div.classList.remove("hidden")
                const span = document.createElement('span');
                span.id = match.id;
                span.classList.add("option-span");
                span.innerText = match.first_name + " " + match.last_name + " " + match.dni;
                span.addEventListener('click', ()=>{
                    contract_body_data.renter_id = match.id;
                    document.querySelector("#renter-input").value = match.first_name + " " + match.last_name + " " + match.dni;
                    document.querySelector("#renter-input").setAttribute('isvalid', true);
                    options_div.classList.add("hidden")
                    document.querySelector("#renter-input").classList.remove('invalid');
                    checkInputs();
                })
                options_div.appendChild(span);
            })
        }else{
            options_div.classList.add("hidden")
        }
        if(!body_data.owner_id)
            document.querySelector("#renter-input").classList.add('invalid');
        checkInputs();
    }

    function hideSuggetions(){
        document.querySelector(".options-modal").classList.add("hidden");
        document.querySelector(".renters-options-modal").classList.add("hidden");
    }

    function handleGeneralFormClicks(event){
        if(!event.target.classList.contains("span-option")){
            hideSuggetions()
        }
    }

    function newContractForm(){
        contract_body_data = default_contract_body;
        setCurrentTime();
        document.querySelector(".create-contract").classList.remove("hidden");
        document.querySelector(".new-contract-title").classList.remove("hidden");
        document.querySelector("#show-create-contract-button").classList.add("hidden");
        window.scrollTo({behavior: "smooth", top: window.innerHeight});
    }
    
    function cancelNewContract(){
        contract_body_data = default_contract_body;
        document.querySelector(".create-contract").classList.add("hidden");
        document.querySelector(".new-contract-title").classList.add("hidden");
        document.querySelector("#show-create-contract-button").classList.remove("hidden");
    }

    function setCurrentTime(){
        let date = new Date();

        setFrom(date);
    }

    function setFrom(date){
        if(typeof date + '' == 'string'){
            const dateArray = date.split('-');
            date = new Date(dateArray[0], dateArray[1]-1, dateArray[2]);
        }

        let day = date.getDate(),
            month = date.getMonth() + 1,
            year = date.getFullYear();

        month = (month < 10 ? "0" : "") + month;
        day = (day < 10 ? "0" : "") + day;

        let today = year + "-" + month + "-" + day;

        document.querySelector('#from-input').value = today;
        document.querySelector('#from-input').setAttribute('min', today);
        contract_body_data.from = today;
        setUntil(date);
    }

    function setUntil(date){console.log(date);
        let day = date.getDate() + 1;
        let month = date.getMonth() + 1;
        let year = date.getFullYear();

        if((day == 29 && month == 2) || (day == 31 && month % 2 == 0) || (day == 30 && month % 2 != 0)){
            day = 1;
            month += 1;
        }
        month = (month < 10 ? "0" : "") + month;
        day = (day < 10 ? "0" : "") + day;

        let tomorrow = year + "-" + month + "-" + day;

        document.querySelector('#until-input').value = tomorrow;
        document.querySelector('#until-input').setAttribute('min', tomorrow);
        contract_body_data.until = tomorrow;

    }

</script>
