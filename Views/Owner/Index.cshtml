@using Microsoft.AspNetCore.Antiforgery
@model List<Owner>
@inject IAntiforgery antiforgery
@{
    ViewData["Title"] = "Propietarios";

    var token = antiforgery.GetAndStoreTokens(Context).RequestToken;
}
<section class="section">
    <ul class="owners-list list">
        <li class="owner-list-header list-header">
            <div class="list-colum">
                <span id="n-intern-header" class="n-intern-column">N° interno</span>
                <span class="dni-column">Dni</span>
                <span>Nombre completo</span>
            </div>
            <div class="action-buttons list-actions-column">
                @* <span>Acciones</span> *@
                <button onclick="createForm()" class="new-btn create-btn">
                    <img class="btn-img" src="~/images/new_person.png" alt="agregar propietario">
                    nuevo
                </button>
            </div>
        </li>
        @{
            foreach (var owner in Model)
            {
                <li class="owner-row list-row">
                    <div class="list-colum">
                        <span class="n-intern-column">#@owner.Id</span>
                        <span class="dni-column">@owner.Dni</span>
                        <span>@owner.ToString()</span>
                    </div>
                    <div class="action-buttons list-actions-column">
                        <button class="button list-action-button details-bg" onclick="showOwnerDetail('@owner.Id')">
                            <span class="tooltip hidden">Ver detalles</span>
                            <img class="btn-img" src="~/images/details.png" alt="ver detalles de propietario">
                        </button>
                        <button class="button list-action-button edit-bg" onclick="updateForm('@owner.Id')">
                            <span class="tooltip hidden">Editar</span>
                            <img class="btn-img" src="~/images/edit.png" alt="editar propietario">
                        </button>
                        @if(Context.User.IsInRole("admin")){
                            <button class="button list-action-button danger-bg" onclick="confirmDelete('@owner.Id')">
                                <span class="tooltip hidden">Eliminar</span>
                                <img class="btn-img" src="~/images/delete.png" alt="eliminar propietario">
                            </button>
                        }
                    </div>
                </li>
            }
        }
    </ul>
</section>

<section class="actions-section actions-section-hide section">
    <form autocomplete="off" onsubmit="handleSubmit(event)" class="form hidden">
        <h2 class="form-title">title</h2>
        <div class="form-row">
            <label class="form-label" for="">Nombre<sup>*</sup></label>
            <input onchange="handleChange(event)" onclick="addErrorWatcher(event)" onfocus="addErrorWatcher(event)" autofocus id="name-input" name="first_name" class="form-input" type="text" required>
            <span class="input-error">Campo obligatorio</span>
        </div>
        <div class="form-row">
            <label class="form-label" for="">Apellido<sup>*</sup></label>
            <input onchange="handleChange(event)" onclick="addErrorWatcher(event)" onfocus="addErrorWatcher(event)" id="last-name-input" name="last_name" class="form-input" type="text" required>
            <span class="input-error">Campo obligatorio</span>
        </div> 
        <div class="form-row">
            <label class="form-label" for="">DNI<sup>*</sup></label>
            <input onchange="handleChange(event)" onclick="addErrorWatcher(event)" onfocus="addErrorWatcher(event)" id="dni-input" name="dni" class="form-input" type="number" min="1000000" required>
            <span class="input-error">Mínimo 7 dígitos, sólo números</span>
        </div>
        <div class="form-row">
            <label class="form-label" for="">email<sup>*</sup></label>
            <input onchange="handleChange(event)" onclick="addErrorWatcher(event)" onfocus="addErrorWatcher(event)" id="email-input" name="email" class="form-input" type="email" required>
            <span class="input-error">No es un email válido</span>
        </div>
        <div class="form-row">
            <label class="form-label" for="">teléfono</label>
            <input onchange="handleChange(event)" id="phone-input" name="phone" class="form-input" type="text">
        </div>
        <div class="form-buttons">
            <button class="confirm-btn disabled-btn" id="send-button" disabled></button>
            <button class="cancel-btn" onclick="cancelAction()">Cancelar</button>
        </div>
    </form>
    
    <form autocomplete="off" onsubmit="handleSubmit(event)" class="form-detail hidden">
        <h2 class="form-title">Detalles</h2>
        <div class="form-row">
            <label class="form-label" for="">Nombre</label>
            <input disabled id="name-detail" name="first_name" class="form-detail-field" type="text" required>
        </div>
        <div class="form-row">
            <label class="form-label" for="">Apellido</label>
            <input disabled id="last-name-detail" name="last_name" class="form-detail-field" type="text" required>
        </div> 
        <div class="form-row">
            <label class="form-label" for="">DNI</label>
            <input disabled id="dni-detail" name="dni" class="form-detail-field" type="number" min="1000000" required>
        </div>
        <div class="form-row">
            <label class="form-label" for="">email</label>
            <input disabled id="email-detail" name="email" class="form-detail-field" type="email" required>
        </div>
        <div class="form-row">
            <label class="form-label" for="">teléfono</label>
            <input disabled id="phone-detail" name="phone" class="form-detail-field" type="text">
        </div>
    </form>
    
    <div class="confirm-delete confirm-dialog hidden">
        <span>Está seguro que desea eliminar?</span>
        <div class="buttons">
            <button class="delete-btn">Eliminar</button>
            <button class="cancel-btn" onclick="cancelAction()">Cancelar</button>
        </div>
    </div>

    <div class="spinner"></div>

    <div class="toast error-toast hidden">
        <span class="toast-title error-type"></span>
        <span class="toast-info error-msg"></span>
    </div>
    
</section>

<script>

    document.body.addEventListener('keydown', (e)=>{
        if(e.key === "Escape") {
            hideActions();
        }
    });

    @* const base_url = "https://localhost:7164/Owner/"; *@

    let last_action;
    let delete_id = null;

    const default_body = {
        first_name: null,
        last_name: null,
        email: null,
        phone: null,
        dni: null
    };

    let body_data = default_body;


    function handleSubmit(e){
        e.preventDefault();
    }

    function handleChange(event){
        const key = event.target.name;
        body_data[key] = event.target.value.trim();
        console.log(body_data)
        if( body_data.first_name?.length > 3 
            && body_data.last_name?.length > 3
            && parseInt(body_data?.dni) > 99999
            && body_data.email?.length > 3
        ){
        console.log("datos ok")
            document.querySelector("#send-button").removeAttribute("disabled"); 
            document.querySelector("#send-button").classList.remove("disabled-btn");
        }else{
        console.log("datos ok'nt")
            document.querySelector("#send-button").setAttribute("disabled", "");
            document.querySelector("#send-button").classList.add("disabled-btn");
        }
    }

    function clearForm(){
        document.querySelector("#name-input").value='';
        document.querySelector("#last-name-input").value='';
        document.querySelector("#dni-input").value='';
        document.querySelector("#email-input").value='';
        document.querySelector("#phone-input").value='';
        document.querySelector(".error-toast").classList.add("hidden");
        body_data = default_body;
        document.querySelector("#send-button").removeEventListener("click",()=>{sendCreateReq()});
    }
    
    function showActions(){
        document.querySelector(".actions-section").classList.remove("actions-section-hide")
    }
    
    function hideActions(){
        document.querySelector(".actions-section").classList.add("actions-section-hide")
        document.querySelector(".form").classList.add("hidden");
        document.querySelector(".form-detail").classList.add("hidden");
        document.querySelector(".confirm-delete").classList.add("hidden");
        document.querySelector(".spinner").classList.remove("hidden");
        document.querySelector(".error-toast").classList.add("hidden");
        delete_id = null;
    }

    function cancelAction(){
        hideModal();
        clearForm();
        removeErrorWatcher();
    }

    function confirmDelete(id){
        document.querySelector(".spinner").classList.add("hidden");
        document.querySelector(".confirm-delete").classList.remove("hidden");
        document.querySelector(".delete-btn").addEventListener("click", ()=>{deleteOwner(id)})
        showActions();
    }

    function deleteOwner(id){
        document.querySelector(".confirm-delete").classList.add("hidden");
        document.querySelector(".spinner").classList.remove("hidden");
        
        if(id !== null){
            fetch(`${base_url}Owner/delete?id=${id}`, {
                method: "DELETE",
                headers:{
                    "Content-Type": "application/json",
                    "RequestVerificationToken": "@token"
                },
            }).then(res=>{
                if(res.status != 200)
                    showError("Error", "No se pudo eliminar el propietario, intenta nuevamente.");
                if(res.redirected)
                    window.location.href =res.url;
                
            }).catch(e=>{
                console.error(e);
            })
        }
    }
    
    function createForm(){
        showActions();
        if(last_action == 'update') clearForm();
        last_action = 'create';
        document.querySelector(".form-title").innerHTML = "Nuevo inquilino";
        document.querySelector("#send-button").innerHTML = "Agregar";
        document.querySelector("#send-button").addEventListener("click", ()=>{sendCreateReq()});
        document.querySelector(".spinner").classList.add("hidden");
        document.querySelector(".form").classList.remove("hidden");
    }
    
    function updateForm(owner_id){
        
        last_action = 'update';
        showActions();

        fetch(`https://localhost:7164/Owner/${parseInt(owner_id)}`, {
            headers:{
                "RequestVerificationToken": "@token"
            }
        }).then(res=>res.json()).then(data=>{
            console.log(data);
            setCurrentOwnerData(data)
            document.querySelector(".spinner").classList.add("hidden");
            document.querySelector(".form").classList.remove("hidden");
        }).catch(e=>{
            console.error(e);
        })
        document.querySelector(".form-title").innerHTML = "Actualizar datos de inquilino";
        document.querySelector("#send-button").innerHTML = "Actualizar";
    }

    function setCurrentOwnerData(owner){
        body_data = {...owner};
        document.querySelector("#name-input").value=owner.first_name;
        document.querySelector("#last-name-input").value=owner.last_name;
        document.querySelector("#dni-input").value=owner.dni;
        document.querySelector("#email-input").value=owner.email;
        if(owner.phone)
            document.querySelector("#phone-input").value=owner.phone;
        document.querySelector("#send-button").addEventListener("click", ()=>{sendUpdateReq(owner.id)});
    }

    function displayOwnerInfo(owner){
        document.querySelector("#name-detail").value=owner.first_name;
        document.querySelector("#last-name-detail").value=owner.last_name;
        document.querySelector("#dni-detail").value=owner.dni;
        document.querySelector("#email-detail").value=owner.email;
        if(owner.phone)
            document.querySelector("#phone-detail").value=owner.phone;
    }
    
    function showOwnerDetail(id){
        
        showActions();

        fetch(`${base_url}Owner/${parseInt(id)}`, {
            headers:{
                "RequestVerificationToken": "@token"
            }
        }).then(res=>res.json()).then(data=>{
            if(!data)
                return showError("Error", "No se pudo acceder a los datos del propietario, intenta nuevamente.", ()=>{
                    hideActions();
                });
            displayOwnerInfo(data);
            document.querySelector(".spinner").classList.add("hidden");
            document.querySelector(".form-detail").classList.remove("hidden");
        }).catch(e=>{
            console.error(e);
        })
    }

    function sendCreateReq(){

        const emailReg = new RegExp('^(([^<>()[\]\.,;:\s@@\"]+(\.[^<>()[\]\.,;:\s@@\"]+)*)|(\".+\"))@@(([^<>()[\]\.,;:\s@@\"]+\.)+[^<>()[\]\.,;:\s@@\"]{2,})$', "i");
        const first_name = document.querySelector("#name-input").value;
        const last_name = document.querySelector("#last-name-input").value;
        const dni = document.querySelector("#dni-input").value;
        const email = document.querySelector("#email-input").value;
        const phone = document.querySelector("#phone-input").value;

        if(first_name.length < 3)
            return showError('Datos inválidos', 'No completó correctamente el campo "Nombre"');
        if(last_name.length < 3)
            return showError('Datos inválidos', 'No completó correctamente el campo "Apellido"');
        if(dni < 1000000)
            return showError('Datos inválidos', 'No completó correctamente el campo "DNI"');
        if(@* !emailReg.test(email) *@ email.length < 10)
            return showError('Datos inválidos', 'No completó correctamente el campo "Email"');

        const body = {
            "First_name": first_name,
            "Last_name": last_name,
            "Dni": dni,
            "Email": email,
            "Phone": phone
        }

        document.querySelector(".form").classList.add("hidden");
        document.querySelector(".spinner").classList.remove("hidden");

        fetch(`${base_url}Owner/new`, {
                method: "POST",
                headers:{
                    "Content-Type": "application/json",
                    "RequestVerificationToken": "@token"
                },
                body: JSON.stringify(body),
            }).then(res=>{
                if(res.status != 200)
                    showError("Error", "No se pudo crear el propietario, intenta nuevamente.", ()=>{
                        document.querySelector(".form").classList.remove("hidden");
                    });
                if(res.redirected)
                    window.location.href =res.url;
                
            }).catch(e=>{
                console.error(e);
        })
    }
    
    function sendUpdateReq(){

        document.querySelector(".form").classList.add("hidden");
        document.querySelector(".spinner").classList.remove("hidden");

        fetch(`${base_url}Owner/update`, {
                method: "PUT",
                headers:{
                    "Content-Type": "application/json",
                    "RequestVerificationToken": "@token"
                },
                body: JSON.stringify(body_data),
            }).then(res=>{
                if(res.status != 200)
                    showError("Error", "No se pudo crear el propietario, intenta nuevamente.", ()=>{
                        document.querySelector(".form").classList.remove("hidden");
                    });
                if(res.redirected)
                    window.location.href =res.url;
                
            }).catch(e=>{
                console.error(e);
        })
    }

    function addErrorWatcher(event){
        event.target.classList.add("error-watcher");
    }
    
    function removeErrorWatcher(){
        document.querySelectorAll(".error-watcher").forEach(input=>{
            input.classList.remove("error-watcher");
        })
    }
    
    function removeDeleteListener(){
        document.querySelector(".delete-btn").removeEventListener("click", deleteOwner)
    }
    
    function showError(type, msg, effect = null){
        document.querySelector(".spinner").classList.add("hidden");
        document.querySelector(".error-toast").classList.remove("hidden");
        document.querySelector(".error-type").innerHTML = type;
        document.querySelector(".error-msg").innerHTML = msg;
        setTimeout(()=>{
            closeToast(effect);
        }, 3.5 * 1000)
    }

    function closeToast(effect = null){
        document.querySelector(".error-toast").classList.add("hidden");
        document.querySelector(".error-type").innerHTML = '';
        document.querySelector(".error-msg").innerHTML = '';
        if(effect) effect();
    }

</script>
